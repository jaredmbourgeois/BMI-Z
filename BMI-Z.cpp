//
//  BMI-Z.cpp
//  
//
//  Created by Jared Bourgeois on 8/12/17.
//  LSUHSC New Orleans School of Medicine
//

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <streambuf>
#include <iterator>
#include <cmath>
using namespace std;

double femaleData[243][4] = {
    {0.0,-0.06310,13.33630,0.09272},
    {1.0,0.03620,13.31850,0.09360},
    {2.0,0.13550,13.30060,0.09448},
    {3.0,0.23470,13.28280,0.09535},
    {4.0,0.33400,13.26490,0.09623},
    {5.0,0.43330,13.24700,0.09711},
    {6.0,0.53260,13.22920,0.09799},
    {7.0,0.63190,13.21130,0.09887},
    {8.0,0.61420,13.24550,0.09866},
    {9.0,0.59650,13.27960,0.09845},
    {10.0,0.57890,13.31370,0.09824},
    {11.0,0.56120,13.34780,0.09804},
    {12.0,0.54350,13.38190,0.09783},
    {13.0,0.52580,13.41600,0.09762},
    {14.0,0.50820,13.45010,0.09741},
    {15.0,0.49470,13.51690,0.09726},
    {16.0,0.48200,13.58730,0.09711},
    {17.0,0.46990,13.65950,0.09697},
    {18.0,0.45830,13.73250,0.09684},
    {19.0,0.44720,13.80560,0.09671},
    {20.0,0.43650,13.87840,0.09659},
    {21.0,0.42630,13.95050,0.09647},
    {22.0,0.41640,14.02160,0.09636},
    {23.0,0.40690,14.09160,0.09625},
    {24.0,-0.98661,16.42340,0.08545},
    {24.5,-1.02450,16.38804,0.08503},
    {25.5,-1.10270,16.31897,0.08421},
    {26.5,-1.18397,16.25208,0.08346},
    {27.5,-1.26807,16.18735,0.08275},
    {28.5,-1.35475,16.12475,0.08209},
    {29.5,-1.44369,16.06429,0.08149},
    {30.5,-1.53454,16.00593,0.08093},
    {31.5,-1.62693,15.94967,0.08043},
    {32.5,-1.72043,15.89548,0.07997},
    {33.5,-1.81464,15.84336,0.07956},
    {34.5,-1.90908,15.79329,0.07919},
    {35.5,-2.00330,15.74526,0.07888},
    {36.5,-2.09683,15.69924,0.07861},
    {37.5,-2.18921,15.65523,0.07838},
    {38.5,-2.27999,15.61321,0.07820},
    {39.5,-2.36873,15.57317,0.07806},
    {40.5,-2.45502,15.53508,0.07796},
    {41.5,-2.53847,15.49893,0.07791},
    {42.5,-2.61873,15.46470,0.07790},
    {43.5,-2.69549,15.43238,0.07794},
    {44.5,-2.76846,15.40193,0.07801},
    {45.5,-2.83743,15.37335,0.07813},
    {46.5,-2.90218,15.34661,0.07828},
    {47.5,-2.96258,15.32168,0.07848},
    {48.5,-3.01852,15.29855,0.07871},
    {49.5,-3.06994,15.27719,0.07899},
    {50.5,-3.11680,15.25757,0.07930},
    {51.5,-3.15911,15.23967,0.07965},
    {52.5,-3.19691,15.22347,0.08003},
    {53.5,-3.23028,15.20894,0.08045},
    {54.5,-3.25930,15.19606,0.08090},
    {55.5,-3.28410,15.18480,0.08139},
    {56.5,-3.30481,15.17513,0.08191},
    {57.5,-3.32160,15.16703,0.08246},
    {58.5,-3.33462,15.16047,0.08305},
    {59.5,-3.34405,15.15543,0.08366},
    {60.5,-3.35008,15.15188,0.08430},
    {61.5,-3.35289,15.14980,0.08497},
    {62.5,-3.35269,15.14917,0.08566},
    {63.5,-3.34966,15.14995,0.08638},
    {64.5,-3.34400,15.15213,0.08713},
    {65.5,-3.33589,15.15567,0.08789},
    {66.5,-3.32552,15.16056,0.08868},
    {67.5,-3.31308,15.16678,0.08949},
    {68.5,-3.29873,15.17429,0.09032},
    {69.5,-3.28265,15.18309,0.09116},
    {70.5,-3.26500,15.19313,0.09203},
    {71.5,-3.24594,15.20441,0.09291},
    {72.5,-3.22561,15.21690,0.09380},
    {73.5,-3.20415,15.23058,0.09471},
    {74.5,-3.18169,15.24543,0.09563},
    {75.5,-3.15836,15.26142,0.09657},
    {76.5,-3.13428,15.27854,0.09751},
    {77.5,-3.10956,15.29676,0.09846},
    {78.5,-3.08429,15.31607,0.09943},
    {79.5,-3.05858,15.33644,0.10040},
    {80.5,-3.03251,15.35785,0.10137},
    {81.5,-3.00616,15.38029,0.10236},
    {82.5,-2.97961,15.40374,0.10334},
    {83.5,-2.95293,15.42817,0.10433},
    {84.5,-2.92619,15.45357,0.10533},
    {85.5,-2.89944,15.47991,0.10632},
    {86.5,-2.87273,15.50718,0.10732},
    {87.5,-2.84612,15.53537,0.10831},
    {88.5,-2.81966,15.56444,0.10931},
    {89.5,-2.79337,15.59439,0.11030},
    {90.5,-2.76731,15.62520,0.11129},
    {91.5,-2.74150,15.65684,0.11228},
    {92.5,-2.71597,15.68930,0.11327},
    {93.5,-2.69075,15.72257,0.11425},
    {94.5,-2.66587,15.75662,0.11523},
    {95.5,-2.64134,15.79143,0.11620},
    {96.5,-2.61719,15.82700,0.11716},
    {97.5,-2.59343,15.86329,0.11812},
    {98.5,-2.57008,15.90030,0.11906},
    {99.5,-2.54714,15.93802,0.12000},
    {100.5,-2.52464,15.97641,0.12094},
    {101.5,-2.50257,16.01546,0.12186},
    {102.5,-2.48095,16.05517,0.12277},
    {103.5,-2.45979,16.09551,0.12367},
    {104.5,-2.43908,16.13646,0.12456},
    {105.5,-2.41884,16.17801,0.12544},
    {106.5,-2.39906,16.22014,0.12631},
    {107.5,-2.37976,16.26284,0.12717},
    {108.5,-2.36092,16.30609,0.12801},
    {109.5,-2.34256,16.34988,0.12884},
    {110.5,-2.32466,16.39418,0.12966},
    {111.5,-2.30724,16.43899,0.13047},
    {112.5,-2.29029,16.48428,0.13126},
    {113.5,-2.27380,16.53005,0.13203},
    {114.5,-2.25778,16.57627,0.13280},
    {115.5,-2.24223,16.62293,0.13354},
    {116.5,-2.22713,16.67002,0.13428},
    {117.5,-2.21250,16.71751,0.13500},
    {118.5,-2.19831,16.76540,0.13570},
    {119.5,-2.18458,16.81368,0.13639},
    {120.5,-2.17130,16.86231,0.13706},
    {121.5,-2.15845,16.91130,0.13771},
    {122.5,-2.14605,16.96062,0.13835},
    {123.5,-2.13408,17.01026,0.13898},
    {124.5,-2.12255,17.06021,0.13959},
    {125.5,-2.11144,17.11045,0.14018},
    {126.5,-2.10075,17.16097,0.14075},
    {127.5,-2.09048,17.21174,0.14131},
    {128.5,-2.08062,17.26277,0.14186},
    {129.5,-2.07117,17.31403,0.14238},
    {130.5,-2.06213,17.36551,0.14290},
    {131.5,-2.05348,17.41719,0.14339},
    {132.5,-2.04524,17.46907,0.14387},
    {133.5,-2.03738,17.52112,0.14433},
    {134.5,-2.02991,17.57333,0.14478},
    {135.5,-2.02282,17.62570,0.14521},
    {136.5,-2.01611,17.67820,0.14562},
    {137.5,-2.00977,17.73082,0.14602},
    {138.5,-2.00380,17.78356,0.14640},
    {139.5,-1.99820,17.83638,0.14677},
    {140.5,-1.99296,17.88929,0.14712},
    {141.5,-1.98807,17.94227,0.14745},
    {142.5,-1.98354,17.99531,0.14777},
    {143.5,-1.97936,18.04838,0.14807},
    {144.5,-1.97552,18.10149,0.14836},
    {145.5,-1.97202,18.15461,0.14864},
    {146.5,-1.96886,18.20774,0.14889},
    {147.5,-1.96604,18.26085,0.14914},
    {148.5,-1.96354,18.31395,0.14937},
    {149.5,-1.96137,18.36701,0.14958},
    {150.5,-1.95952,18.42002,0.14978},
    {151.5,-1.95799,18.47298,0.14997},
    {152.5,-1.95677,18.52586,0.15014},
    {153.5,-1.95587,18.57866,0.15030},
    {154.5,-1.95527,18.63136,0.15045},
    {155.5,-1.95497,18.68396,0.15058},
    {156.5,-1.95498,18.73643,0.15071},
    {157.5,-1.95528,18.78878,0.15081},
    {158.5,-1.95587,18.84098,0.15091},
    {159.5,-1.95676,18.89302,0.15099},
    {160.5,-1.95792,18.94490,0.15107},
    {161.5,-1.95937,18.99660,0.15113},
    {162.5,-1.96110,19.04811,0.15118},
    {163.5,-1.96310,19.09942,0.15122},
    {164.5,-1.96537,19.15052,0.15124},
    {165.5,-1.96791,19.20139,0.15126},
    {166.5,-1.97071,19.25204,0.15127},
    {167.5,-1.97376,19.30243,0.15127},
    {168.5,-1.97707,19.35257,0.15126},
    {169.5,-1.98063,19.40245,0.15124},
    {170.5,-1.98444,19.45204,0.15121},
    {171.5,-1.98848,19.50136,0.15117},
    {172.5,-1.99276,19.55037,0.15112},
    {173.5,-1.99728,19.59907,0.15107},
    {174.5,-2.00201,19.64746,0.15101},
    {175.5,-2.00697,19.69552,0.15094},
    {176.5,-2.01215,19.74325,0.15087},
    {177.5,-2.01753,19.79062,0.15079},
    {178.5,-2.02312,19.83764,0.15070},
    {179.5,-2.02891,19.88429,0.15061},
    {180.5,-2.03489,19.93057,0.15051},
    {181.5,-2.04106,19.97646,0.15041},
    {182.5,-2.04741,20.02195,0.15030},
    {183.5,-2.05393,20.06704,0.15019},
    {184.5,-2.06062,20.11172,0.15008},
    {185.5,-2.06746,20.15598,0.14996},
    {186.5,-2.07446,20.19981,0.14984},
    {187.5,-2.08160,20.24320,0.14972},
    {188.5,-2.08888,20.28614,0.14960},
    {189.5,-2.09628,20.32862,0.14947},
    {190.5,-2.10380,20.37064,0.14934},
    {191.5,-2.11143,20.41219,0.14922},
    {192.5,-2.11916,20.45326,0.14909},
    {193.5,-2.12698,20.49383,0.14896},
    {194.5,-2.13487,20.53392,0.14884},
    {195.5,-2.14284,20.57349,0.14871},
    {196.5,-2.15087,20.61256,0.14859},
    {197.5,-2.15894,20.65111,0.14847},
    {198.5,-2.16704,20.68912,0.14835},
    {199.5,-2.17518,20.72661,0.14823},
    {200.5,-2.18332,20.76355,0.14812},
    {201.5,-2.19146,20.79994,0.14802},
    {202.5,-2.19958,20.83578,0.14791},
    {203.5,-2.20768,20.87105,0.14782},
    {204.5,-2.21574,20.90576,0.14772},
    {205.5,-2.22374,20.93988,0.14764},
    {206.5,-2.23167,20.97343,0.14756},
    {207.5,-2.23951,21.00638,0.14749},
    {208.5,-2.24726,21.03874,0.14742},
    {209.5,-2.25489,21.07049,0.14737},
    {210.5,-2.26238,21.10163,0.14732},
    {211.5,-2.26973,21.13216,0.14729},
    {212.5,-2.27692,21.16206,0.14726},
    {213.5,-2.28393,21.19134,0.14724},
    {214.5,-2.29073,21.21997,0.14724},
    {215.5,-2.29732,21.24797,0.14725},
    {216.5,-2.30369,21.27532,0.14727},
    {217.5,-2.30980,21.30202,0.14730},
    {218.5,-2.31565,21.32805,0.14735},
    {219.5,-2.32122,21.35343,0.14741},
    {220.5,-2.32648,21.37812,0.14749},
    {221.5,-2.33143,21.40215,0.14758},
    {222.5,-2.33604,21.42548,0.14769},
    {223.5,-2.34030,21.44813,0.14782},
    {224.5,-2.34418,21.47008,0.14796},
    {225.5,-2.34768,21.49134,0.14812},
    {226.5,-2.35077,21.51188,0.14830},
    {227.5,-2.35344,21.53171,0.14850},
    {228.5,-2.35568,21.55082,0.14872},
    {229.5,-2.35746,21.56921,0.14897},
    {230.5,-2.35876,21.58686,0.14923},
    {231.5,-2.35959,21.60378,0.14952},
    {232.5,-2.35991,21.61996,0.14983},
    {233.5,-2.35971,21.63539,0.15016},
    {234.5,-2.35898,21.65006,0.15052},
    {235.5,-2.35771,21.66397,0.15091},
    {236.5,-2.35589,21.67712,0.15132},
    {237.5,-2.35350,21.68949,0.15175},
    {238.5,-2.35053,21.70108,0.15222},
    {239.5,-2.34696,21.71189,0.15272},
    {240.0,-2.34496,21.71700,0.15297},
    {240.5,-2.34280,21.72191,0.15324}
};

double maleData[243][4] = {
    {0.0,-0.30530,13.40690,0.09560},
    {1.0,-0.18670,13.39760,0.09597},
    {2.0,-0.06810,13.38830,0.09634},
    {3.0,0.05050,13.37910,0.09672},
    {4.0,0.16900,13.36980,0.09709},
    {5.0,0.28760,13.36060,0.09746},
    {6.0,0.40620,13.35130,0.09784},
    {7.0,0.52470,13.34210,0.09821},
    {8.0,0.50940,13.38430,0.09769},
    {9.0,0.49410,13.42650,0.09716},
    {10.0,0.47890,13.46870,0.09664},
    {11.0,0.46360,13.51100,0.09611},
    {12.0,0.44830,13.55320,0.09559},
    {13.0,0.43300,13.59540,0.09507},
    {14.0,0.41770,13.63770,0.09454},
    {15.0,0.40590,13.71740,0.09416},
    {16.0,0.39460,13.80060,0.09380},
    {17.0,0.38390,13.88540,0.09347},
    {18.0,0.37350,13.97070,0.09315},
    {19.0,0.36360,14.05580,0.09285},
    {20.0,0.35410,14.14040,0.09257},
    {21.0,0.34490,14.22410,0.09230},
    {22.0,0.33600,14.30650,0.09204},
    {23.0,0.32740,14.38770,0.09180},
    {24.0,-2.01118,16.57503,0.08059},
    {24.5,-1.98237,16.54777,0.08013},
    {25.5,-1.92410,16.49443,0.07923},
    {26.5,-1.86550,16.44260,0.07839},
    {27.5,-1.80726,16.39224,0.07759},
    {28.5,-1.75012,16.34334,0.07685},
    {29.5,-1.69482,16.29584,0.07615},
    {30.5,-1.64211,16.24972,0.07550},
    {31.5,-1.59274,16.20495,0.07490},
    {32.5,-1.54744,16.16150,0.07435},
    {33.5,-1.50690,16.11933,0.07385},
    {34.5,-1.47177,16.07843,0.07339},
    {35.5,-1.44263,16.03876,0.07299},
    {36.5,-1.41999,16.00030,0.07263},
    {37.5,-1.40428,15.96304,0.07233},
    {38.5,-1.39586,15.92695,0.07207},
    {39.5,-1.39494,15.89203,0.07186},
    {40.5,-1.40167,15.85824,0.07169},
    {41.5,-1.41610,15.82559,0.07157},
    {42.5,-1.43816,15.79406,0.07150},
    {43.5,-1.46767,15.76364,0.07146},
    {44.5,-1.50438,15.73434,0.07147},
    {45.5,-1.54794,15.70614,0.07152},
    {46.5,-1.59790,15.67904,0.07161},
    {47.5,-1.65373,15.65305,0.07173},
    {48.5,-1.71487,15.62817,0.07189},
    {49.5,-1.78067,15.60441,0.07208},
    {50.5,-1.85047,15.58176,0.07231},
    {51.5,-1.92355,15.56025,0.07256},
    {52.5,-1.99922,15.53987,0.07284},
    {53.5,-2.07671,15.52065,0.07315},
    {54.5,-2.15535,15.50258,0.07349},
    {55.5,-2.23444,15.48569,0.07385},
    {56.5,-2.31332,15.46998,0.07424},
    {57.5,-2.39138,15.45546,0.07464},
    {58.5,-2.46803,15.44214,0.07507},
    {59.5,-2.54278,15.43003,0.07552},
    {60.5,-2.61517,15.41914,0.07599},
    {61.5,-2.68479,15.40947,0.07648},
    {62.5,-2.75132,15.40103,0.07699},
    {63.5,-2.81446,15.39382,0.07752},
    {64.5,-2.87402,15.38783,0.07807},
    {65.5,-2.92984,15.38307,0.07863},
    {66.5,-2.98180,15.37953,0.07921},
    {67.5,-3.02983,15.37721,0.07981},
    {68.5,-3.07392,15.37609,0.08043},
    {69.5,-3.11409,15.37618,0.08106},
    {70.5,-3.15039,15.37745,0.08171},
    {71.5,-3.18289,15.37991,0.08237},
    {72.5,-3.21171,15.38353,0.08305},
    {73.5,-3.23695,15.38831,0.08374},
    {74.5,-3.25876,15.39423,0.08445},
    {75.5,-3.27728,15.40127,0.08517},
    {76.5,-3.29268,15.40943,0.08590},
    {77.5,-3.30512,15.41869,0.08664},
    {78.5,-3.31477,15.42902,0.08740},
    {79.5,-3.32179,15.44042,0.08817},
    {80.5,-3.32635,15.45288,0.08894},
    {81.5,-3.32860,15.46636,0.08973},
    {82.5,-3.32873,15.48087,0.09052},
    {83.5,-3.32687,15.49637,0.09132},
    {84.5,-3.32319,15.51287,0.09213},
    {85.5,-3.31783,15.53034,0.09295},
    {86.5,-3.31092,15.54876,0.09377},
    {87.5,-3.30261,15.56812,0.09459},
    {88.5,-3.29302,15.58841,0.09542},
    {89.5,-3.28226,15.60961,0.09625},
    {90.5,-3.27045,15.63171,0.09708},
    {91.5,-3.25770,15.65469,0.09792},
    {92.5,-3.24411,15.67853,0.09875},
    {93.5,-3.22976,15.70323,0.09959},
    {94.5,-3.21475,15.72877,0.10042},
    {95.5,-3.19916,15.75513,0.10126},
    {96.5,-3.18306,15.78231,0.10209},
    {97.5,-3.16652,15.81029,0.10292},
    {98.5,-3.14961,15.83905,0.10375},
    {99.5,-3.13239,15.86858,0.10457},
    {100.5,-3.11491,15.89888,0.10539},
    {101.5,-3.09723,15.92992,0.10620},
    {102.5,-3.07938,15.96169,0.10701},
    {103.5,-3.06142,15.99419,0.10782},
    {104.5,-3.04339,16.02741,0.10861},
    {105.5,-3.02531,16.06132,0.10940},
    {106.5,-3.00723,16.09591,0.11018},
    {107.5,-2.98916,16.13119,0.11096},
    {108.5,-2.97115,16.16712,0.11172},
    {109.5,-2.95321,16.20371,0.11248},
    {110.5,-2.93536,16.24094,0.11322},
    {111.5,-2.91764,16.27880,0.11396},
    {112.5,-2.90004,16.31728,0.11469},
    {113.5,-2.88259,16.35637,0.11541},
    {114.5,-2.86531,16.39606,0.11611},
    {115.5,-2.84820,16.43633,0.11681},
    {116.5,-2.83129,16.47718,0.11749},
    {117.5,-2.81456,16.51860,0.11817},
    {118.5,-2.79804,16.56057,0.11883},
    {119.5,-2.78174,16.60309,0.11948},
    {120.5,-2.76565,16.64614,0.12011},
    {121.5,-2.74978,16.68972,0.12074},
    {122.5,-2.73414,16.73381,0.12135},
    {123.5,-2.71873,16.77840,0.12195},
    {124.5,-2.70356,16.82350,0.12253},
    {125.5,-2.68861,16.86907,0.12310},
    {126.5,-2.67390,16.91512,0.12366},
    {127.5,-2.65943,16.96164,0.12421},
    {128.5,-2.64519,17.00862,0.12474},
    {129.5,-2.63119,17.05604,0.12526},
    {130.5,-2.61741,17.10390,0.12577},
    {131.5,-2.60387,17.15218,0.12626},
    {132.5,-2.59056,17.20089,0.12673},
    {133.5,-2.57747,17.25000,0.12720},
    {134.5,-2.56461,17.29951,0.12765},
    {135.5,-2.55197,17.34942,0.12808},
    {136.5,-2.53954,17.39970,0.12851},
    {137.5,-2.52733,17.45036,0.12891},
    {138.5,-2.51532,17.50138,0.12931},
    {139.5,-2.50352,17.55276,0.12969},
    {140.5,-2.49192,17.60448,0.13006},
    {141.5,-2.48051,17.65653,0.13041},
    {142.5,-2.46930,17.70892,0.13075},
    {143.5,-2.45827,17.76162,0.13108},
    {144.5,-2.44743,17.81463,0.13139},
    {145.5,-2.43676,17.86795,0.13169},
    {146.5,-2.42626,17.92155,0.13197},
    {147.5,-2.41592,17.97544,0.13225},
    {148.5,-2.40575,18.02961,0.13251},
    {149.5,-2.39573,18.08404,0.13276},
    {150.5,-2.38586,18.13873,0.13299},
    {151.5,-2.37613,18.19367,0.13321},
    {152.5,-2.36654,18.24884,0.13342},
    {153.5,-2.35709,18.30426,0.13362},
    {154.5,-2.34776,18.35989,0.13381},
    {155.5,-2.33855,18.41574,0.13398},
    {156.5,-2.32946,18.47180,0.13414},
    {157.5,-2.32047,18.52805,0.13429},
    {158.5,-2.31160,18.58450,0.13443},
    {159.5,-2.30282,18.64113,0.13456},
    {160.5,-2.29413,18.69793,0.13468},
    {161.5,-2.28553,18.75489,0.13478},
    {162.5,-2.27702,18.81202,0.13488},
    {163.5,-2.26858,18.86929,0.13497},
    {164.5,-2.26021,18.92670,0.13504},
    {165.5,-2.25191,18.98424,0.13511},
    {166.5,-2.24367,19.04191,0.13516},
    {167.5,-2.23549,19.09970,0.13521},
    {168.5,-2.22736,19.15759,0.13525},
    {169.5,-2.21928,19.21558,0.13528},
    {170.5,-2.21124,19.27366,0.13530},
    {171.5,-2.20324,19.33182,0.13532},
    {172.5,-2.19527,19.39006,0.13532},
    {173.5,-2.18734,19.44837,0.13532},
    {174.5,-2.17943,19.50673,0.13531},
    {175.5,-2.17154,19.56514,0.13529},
    {176.5,-2.16367,19.62360,0.13527},
    {177.5,-2.15582,19.68208,0.13524},
    {178.5,-2.14799,19.74060,0.13520},
    {179.5,-2.14016,19.79912,0.13516},
    {180.5,-2.13234,19.85766,0.13511},
    {181.5,-2.12454,19.91620,0.13506},
    {182.5,-2.11674,19.97473,0.13500},
    {183.5,-2.10894,20.03324,0.13493},
    {184.5,-2.10115,20.09172,0.13487},
    {185.5,-2.09336,20.15017,0.13479},
    {186.5,-2.08557,20.20858,0.13472},
    {187.5,-2.07779,20.26694,0.13464},
    {188.5,-2.07002,20.32524,0.13456},
    {189.5,-2.06225,20.38346,0.13447},
    {190.5,-2.05450,20.44162,0.13438},
    {191.5,-2.04675,20.49968,0.13429},
    {192.5,-2.03902,20.55765,0.13420},
    {193.5,-2.03130,20.61551,0.13410},
    {194.5,-2.02361,20.67326,0.13401},
    {195.5,-2.01594,20.73089,0.13391},
    {196.5,-2.00831,20.78839,0.13381},
    {197.5,-2.00071,20.84574,0.13372},
    {198.5,-1.99315,20.90294,0.13362},
    {199.5,-1.98564,20.95999,0.13352},
    {200.5,-1.97819,21.01686,0.13343},
    {201.5,-1.97081,21.07356,0.13333},
    {202.5,-1.96350,21.13007,0.13324},
    {203.5,-1.95627,21.18638,0.13315},
    {204.5,-1.94913,21.24248,0.13306},
    {205.5,-1.94210,21.29836,0.13297},
    {206.5,-1.93518,21.35402,0.13289},
    {207.5,-1.92838,21.40944,0.13280},
    {208.5,-1.92171,21.46461,0.13273},
    {209.5,-1.91519,21.51952,0.13265},
    {210.5,-1.90883,21.57417,0.13258},
    {211.5,-1.90264,21.62854,0.13252},
    {212.5,-1.89663,21.68262,0.13246},
    {213.5,-1.89082,21.73640,0.13241},
    {214.5,-1.88521,21.78988,0.13236},
    {215.5,-1.87982,21.84304,0.13232},
    {216.5,-1.87467,21.89587,0.13229},
    {217.5,-1.86976,21.94836,0.13226},
    {218.5,-1.86511,22.00051,0.13224},
    {219.5,-1.86073,22.05229,0.13223},
    {220.5,-1.85663,22.10371,0.13223},
    {221.5,-1.85283,22.15476,0.13223},
    {222.5,-1.84932,22.20541,0.13225},
    {223.5,-1.84613,22.25567,0.13227},
    {224.5,-1.84326,22.30553,0.13231},
    {225.5,-1.84072,22.35497,0.13236},
    {226.5,-1.83852,22.40399,0.13242},
    {227.5,-1.83666,22.45257,0.13248},
    {228.5,-1.83514,22.50072,0.13257},
    {229.5,-1.83397,22.54841,0.13266},
    {230.5,-1.83316,22.59565,0.13277},
    {231.5,-1.83270,22.64243,0.13289},
    {232.5,-1.83258,22.68873,0.13302},
    {233.5,-1.83282,22.73456,0.13317},
    {234.5,-1.83340,22.77990,0.13334},
    {235.5,-1.83432,22.82474,0.13352},
    {236.5,-1.83556,22.86909,0.13372},
    {237.5,-1.83712,22.91293,0.13393},
    {238.5,-1.83899,22.95626,0.13416},
    {239.5,-1.84115,22.99908,0.13441},
    {240.0,-1.84233,23.02029,0.13454},
    {240.5,-1.84358,23.04138,0.13468}
};

int main () {
    cout << "===========================================\nBMI-Z\nCreated by Jared M. Bourgeois\nLSUHSC New Orleans School of Medicine, 2017\n===========================================\n\n";
    
    std::ifstream csvInput ("BMI_INPUT.csv");
    std::ofstream csvOutput ("BMI_OUTPUT.csv", ios::trunc);
    if (csvInput.is_open() && csvOutput.is_open()) {
        
        stringstream csvStream;
        csvStream << csvInput.rdbuf();
        string csvString = csvStream.str();
        
        int lineCounter = 0;
        int fieldCounter = 0;
        std::string MRN;             // fieldcounter = 0
        std::string gender;          // fieldcounter = 1
        std::string GC;              // fieldcounter = 2
        std::string race;            // fieldcounter = 3
        std::string birthDate;       // fieldcounter = 4
        std::string surgeryDate;     // fieldcounter = 5
        std::string surgeryYears;    // fieldcounter = 6
        std::string surgeryMonths;   // fieldcounter = 7
        std::string preopHeight;     // fieldcounter = 8
        std::string preopWeight;     // fieldcounter = 9
        std::string preopBMI;        // fieldcounter = 10
        
        double lastMonth = 0.0;
        double lastL = 0.0;
        double lastM = 0.0;
        double lastS = 0.0;
        double thisMonth = 0.0;
        double thisL = 0.0;
        double thisM = 0.0;
        double thisS = 0.0;
        double interpolationWeight = 0.0;
        
        double zL = 0.0;
        double zM = 0.0;
        double zS = 0.0;
        double zScore = 0.0;
        double percentile = 0.0;
        int bi = 0;
        
        bool lastIteration = false;
        
        std::string::const_iterator aChar = csvString.begin();
        for (int i = 0; i < csvString.length(); i++) {
            
            if (i == csvString.length() - 1) {
                lastIteration = true;
            }
            
            if (lineCounter == 0) {
                if (*aChar == '\n') {
                    lineCounter++;
                    csvOutput << "MRN,Gender,GC,Race,DOB,SurgeryDate,SurgeryAge(yrs),SurgeryAge(mos),PreopHeight,PreopWeight,PreopBMI,BMI-Z,Z-Score,Percentile\n";
                }
            }
            else {
                if (*aChar == ',') {
                    fieldCounter++;
                }
                else if (*aChar != '\n' && *aChar != '\r') {
                    switch (fieldCounter) {
                        case 0:
                            MRN += *aChar;
                            break;
                            
                        case 1:
                            gender += *aChar;
                            break;
                        
                        case 2:
                            GC += *aChar;
                            break;
                        
                        case 3:
                            race += *aChar;
                            break;
                        
                        case 4:
                            birthDate += *aChar;
                            break;
                        
                        case 5:
                            surgeryDate += *aChar;
                            break;
                        
                        case 6:
                            surgeryYears += *aChar;
                            break;
                        
                        case 7:
                            surgeryMonths += *aChar;
                            break;
                    
                        case 8:
                            preopHeight += *aChar;
                            break;
                        
                        case 9:
                            preopWeight += *aChar;
                            break;
                        
                        case 10:
                            preopBMI += *aChar;
                            break;
                    }
                    
                }
                
                if (*aChar == '\n' || lastIteration == true) {
                    lastMonth = 0.0;
                    lastL = 0.0;
                    lastM = 0.0;
                    lastS = 0.0;
                    thisMonth = 0.0;
                    thisL = 0.0;
                    thisM = 0.0;
                    thisS = 0.0;
                    interpolationWeight = 0.0;
                    
                    zL = 0.0;
                    zM = 0.0;
                    zS = 0.0;
                    zScore = 0.0;
                    
                    if (gender.compare("f") == 0 || gender.compare("F") == 0) {
                        bi = 0;
                        while (bi < sizeof(femaleData)) {
                            switch (bi) {
                                case 0:
                                    lastMonth = femaleData[bi][0];
                                    lastL = femaleData[bi][1];
                                    lastM = femaleData[bi][2];
                                    lastS = femaleData[bi][3];
                                    thisMonth = femaleData[bi][0];
                                    thisL = femaleData[bi][1];
                                    thisM = femaleData[bi][2];
                                    thisS = femaleData[bi][3];
                                    break;
                                    
                                default:
                                    thisMonth = femaleData[bi][0];
                                    thisL = femaleData[bi][1];
                                    thisM = femaleData[bi][2];
                                    thisS = femaleData[bi][3];
                                    break;
                            }
                            
                            if (stod(surgeryMonths) <= thisMonth && stod(surgeryMonths) > lastMonth) {
                                interpolationWeight = (stod(surgeryMonths) - lastMonth)/(thisMonth - lastMonth);
                                zL = lastL + interpolationWeight*(thisL - lastL);
                                zM = lastM + interpolationWeight*(thisM - lastM);
                                zS = lastS + interpolationWeight*(thisS - lastS);
                                
                                if (zL == 0.0) {
                                    zScore = (1.0/zS)*log(stod(preopBMI)/zM);
                                }
                                else {
                                    zScore = (1.0/(zL*zS))*(pow((stod(preopBMI)/zM),zL) - 1.0);
                                }
                                
                                percentile = 100*(-0.0000003*pow(zScore, 6.0) + 0.0021*pow(zScore, 5.0) + 0.000008*pow(zScore, 4.0) - 0.0428*pow(zScore, 3.0) - 0.00005*pow(zScore, 2.0) + 0.3781*zScore + 0.5);
                                
                                csvOutput << MRN << "," << gender << "," << GC << "," << race << "," << birthDate << "," << surgeryDate << "," << surgeryYears << "," << stod(surgeryMonths) << "," << preopHeight << "," << preopWeight << "," << preopBMI << "," << zM << "," << zScore << "," << percentile << "\n";
                                
                                cout << "MRN = " << MRN << ", " << "gender = "<< gender << " ," << "GC = " << GC << ", " << "race = " << race << ", " << "DOB = " << birthDate << ", " << "SurgeryDate = " << surgeryDate << ", " << "ageYears = " << surgeryYears << ", " << "ageMonths = " << stod(surgeryMonths) << ", " << "height = " << preopHeight << ", " << "weight = " << preopWeight << "\n" << "zL = " << zL << ", " << "zS = " << zS << ", " << "BMI = " << preopBMI << ", " << "BMI-Z = " << zM << ", " << "Z-Score = " << zScore << ", " << "Percentile = " << percentile << "\n\n";
                                
                                bi = sizeof(femaleData);
                            }
                            
                            lastMonth = thisMonth;
                            lastL = thisL;
                            lastM = thisM;
                            lastS = thisS;
                            
                            bi++;
                        }
                    }
                    else {
                        bi = 0;
                        while (bi < sizeof(maleData)) {
                            switch (bi) {
                                case 0:
                                    lastMonth = maleData[bi][0];
                                    lastL = maleData[bi][1];
                                    lastM = maleData[bi][2];
                                    lastS = maleData[bi][3];
                                    thisMonth = maleData[bi][0];
                                    thisL = maleData[bi][1];
                                    thisM = maleData[bi][2];
                                    thisS = maleData[bi][3];
                                    break;
                                    
                                default:
                                    thisMonth = maleData[bi][0];
                                    thisL = maleData[bi][1];
                                    thisM = maleData[bi][2];
                                    thisS = maleData[bi][3];
                                    break;
                            }
                            
                            if (stod(surgeryMonths) <= thisMonth && stod(surgeryMonths) > lastMonth) {
                                interpolationWeight = (stod(surgeryMonths) - lastMonth)/(thisMonth - lastMonth);
                                zL = lastL + interpolationWeight*(thisL - lastL);
                                zM = lastM + interpolationWeight*(thisM - lastM);
                                zS = lastS + interpolationWeight*(thisS - lastS);
                                
                                if (zL == 0.0) {
                                    zScore = (1.0/zS)*log(stod(preopBMI)/zM);
                                }
                                else {
                                    zScore = (1.0/(zL*zS))*(pow((stod(preopBMI)/zM),zL) - 1.0);
                                }
                                
                                percentile = 100*(-0.0000003*pow(zScore, 6.0) + 0.0021*pow(zScore, 5.0) + 0.000008*pow(zScore, 4.0) - 0.0428*pow(zScore, 3.0) - 0.00005*pow(zScore, 2.0) + 0.3781*zScore + 0.5);
                                
                                csvOutput << MRN << "," << gender << "," << GC << "," << race << "," << birthDate << "," << surgeryDate << "," << surgeryYears << "," << stod(surgeryMonths) << "," << preopHeight << "," << preopWeight << "," << preopBMI << "," << zM << "," << zScore << "," << percentile << "\n";
                                
                                cout << "MRN = " << MRN << ", " << "gender = "<< gender << " ," << "GC = " << GC << ", " << "race = " << race << ", " << "DOB = " << birthDate << ", " << "SurgeryDate = " << surgeryDate << ", " << "ageYears = " << surgeryYears << ", " << "ageMonths = " << stod(surgeryMonths) << ", " << "height = " << preopHeight << ", " << "weight = " << preopWeight << "\n" << "zL = " << zL << ", " << "zS = " << zS << ", " << "BMI = " << preopBMI << ", " << "BMI-Z = " << zM << ", " << "Z-Score = " << zScore << ", " << "Percentile = " << percentile << "\n\n";
                                
                                bi = sizeof(maleData);
                            }
                            
                            lastMonth = thisMonth;
                            lastL = thisL;
                            lastM = thisM;
                            lastS = thisS;
                            
                            bi++;
                        }
                    }
                    lineCounter++;
                    fieldCounter = 0;
                    
                    MRN.clear();
                    gender.clear();
                    GC.clear();
                    race.clear();
                    birthDate.clear();
                    surgeryDate.clear();
                    surgeryYears.clear();
                    surgeryMonths.clear();
                    preopHeight.clear();
                    preopWeight.clear();
                    preopBMI.clear();
                }
            }
            
            aChar++;
        }
        csvInput.close();
        csvOutput.close();
        
    }
    else {
        cout << "Unable to open files";
    }
}
